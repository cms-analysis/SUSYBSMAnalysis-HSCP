process HSCP =  {
  
source = PoolSource 
{ 
     # replace 'myfile.root' with the source file you want to use
     untracked vstring fileNames = {"file:out_99.root"} 

}

     untracked PSet options = {
        untracked bool wantSummary = true  # default is false
     }



    module out = PoolOutputModule {
    untracked string fileName = 'hscp991.root'
         untracked vstring outputCommands = {
                       "drop *",
                       "keep *_dedxHitsFromRefitter_*_SKIM",
                       "keep *_dedxTruncated40_*_SKIM",
                       "keep *_*_*_HSCP",
                       "keep *_*_*_TER",
                       "keep recoVertexs_offlinePrimaryVerticesFromCTFTracks_*_*",
                   #    "keep *_ctfWithMaterialTracks_*_*",
                       "keep *_muons_*_*",
                       "keep *_*_*_Split",
                       "keep *_TriggerResult_*_*",
                       "keep recoTracks_ctfWithMaterialTracks_*_Rec1",
                       "keep recoTracks_ctfWithMaterialTracks*_*_RECO",
                       "keep double_*_*_*",
                       "keep *_genEventRunInfo_*_*",
                       "drop TrackingRecHitsOwned_*_*_*",
 		       "drop *_TrackRefitter_*_*",
                       "keep *_globalMuons_*_*",
                       "keep *_standAloneMuons_*_*"
	 

    }
 }

#keep the logging output to a nice level
service = MessageLogger {}


  service = TFileService {
    string fileName = "histostau2.root"
  }
# tracker geometry
include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"

# tracker numbering
#include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
include "Configuration/StandardSequences/data/FakeConditions.cff"
include "Configuration/StandardSequences/data/Reconstruction.cff"


module betaFromTOF = BetaFromTOF {
          untracked InputTag  Muons = muons
          untracked InputTag  DTsegments  = dt4DSegments
          int32 HitsMin = 6
          bool OnlyMatched = true
          bool debug  = true
          PSet ServiceParameters = {
               untracked vstring Propagators = {
                 "SteppingHelixPropagatorAny",
                 "PropagatorWithMaterial",
                 "PropagatorWithMaterialOpposite"
               }
               bool RPCLayers = true
          }
     }



module hscp = HSCParticleProducer { 

 InputTag trackDeDxHits = dedxHitsFromRefitter
 InputTag trackDeDxFit = dedxFit
 InputTag trackDeDxEstimator = dedxHarmonic4
 InputTag muons = muons
 InputTag muonsTOF = betaFromTOF 
}


module demo = HSCPAnalyzer {
   InputTag dedxSrc = dedxHarmonic4
   bool haveSimTracks = false
   bool useWeights = false
}


  path p = {betaFromTOF,  hscp, demo} 
  endpath  e = {out}
}
